% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plot_glmm_three_level.R
\name{plot_glmm_three_level}
\alias{plot_glmm_three_level}
\title{Visualize predictions from a three-level multilevel model}
\usage{
plot_glmm_three_level(
  model,
  data,
  predictor,
  outcome,
  level2_var,
  level3_var,
  family = "gaussian",
  y_scale = NULL,
  include_random = TRUE,
  x_limits = NULL,
  x_label = NULL,
  y_label = NULL,
  z_label = NULL,
  plot_title = NULL,
  colors = NULL,
  legend_name = NULL,
  line_width = 2
)
}
\arguments{
\item{model}{A fitted multilevel model of class `lmer`, `glmer`, or
`glmmTMB`.}

\item{data}{A data frame that contains the variables used to fit `model`.}

\item{predictor}{The focal predictor to display on the x-axis, supplied as a
string.}

\item{outcome}{The outcome variable from the fitted model, supplied as a
string. Used for axis labelling when `z_label` is not provided.}

\item{level2_var}{The second-level grouping variable (e.g., classroom),
supplied as a string.}

\item{level3_var}{The third-level grouping variable (e.g., school), supplied
as a string.}

\item{family}{A character string identifying the distribution used when
fitting `model`. Supported families are `"gaussian"`, `"binomial"`,
`"poisson"`, `"Gamma"`, `"beta"`, and `"negative binomial"`.}

\item{y_scale}{Optional specification of the transformation for the
predictions, matched to the supplied `family`. Defaults mirror the response
scale for each family.}

\item{include_random}{Logical; if `TRUE` (default) predictions incorporate the
random effects associated with `level2_var` and `level3_var`. Set to `FALSE`
to show only the fixed-effects surface.}

\item{x_limits}{Optional numeric vector of length two that constrains the
predictor range.}

\item{x_label}{Optional label for the x-axis. Defaults to `predictor`.}

\item{y_label}{Optional label for the y-axis. Defaults to `level2_var`.}

\item{z_label}{Optional label for the z-axis. Defaults to `outcome`.}

\item{plot_title}{Optional plot title.}

\item{colors}{Optional vector of colours used to distinguish the
third-level clusters.}

\item{legend_name}{Optional legend title. Defaults to `level3_var`.}

\item{line_width}{Numeric width of the trajectories drawn for each
second-level cluster. Defaults to `2`.}
}
\value{
A `plotly` object that renders a three-dimensional visualization of
  the model-implied trajectories across the two grouping levels.
}
\description{
`plot_glmm_three_level()` extends the existing plotting utilities to models
with two nested grouping variables (e.g., students within classrooms within
schools). It produces an interactive three-dimensional visualization that
displays the predicted outcome across the focal predictor, second-level
clusters, and the third-level clusters that contain them.
}
\examples{
\dontrun{
  set.seed(123)
  n_school <- 3
  n_class <- 4
  n_student <- 12

  school <- factor(rep(seq_len(n_school), each = n_class * n_student))
  classroom_within_school <- rep(rep(seq_len(n_class), each = n_student),
                                 times = n_school)
  classroom <- factor(paste0("S", school, "_C", classroom_within_school))
  time <- rep(seq(0, 5, length.out = n_student), times = n_school * n_class)

  school_intercept <- rnorm(n_school, sd = 0.7)[school]
  class_intercept <- rnorm(n_school * n_class, sd = 0.4)[classroom]
  school_slope <- rnorm(n_school, sd = 0.1)[school]
  class_slope <- rnorm(n_school * n_class, sd = 0.05)[classroom]

  linear_predictor <- 2 + school_intercept + class_intercept +
    (0.3 + school_slope + class_slope) * time
  score <- linear_predictor + rnorm(length(linear_predictor), sd = 1)

  sim_data <- data.frame(
    school = school,
    classroom = classroom,
    time = time,
    score = score
  )

  three_level_model <- lme4::lmer(
    score ~ time + (time | school/classroom),
    data = sim_data
  )

  plot_glmm_three_level(model = three_level_model,
                        data = sim_data,
                        predictor = "time",
                        outcome = "score",
                        level2_var = "classroom",
                        level3_var = "school")
}
}
